---
# Home Assistant Glow
#
# Read your electricity meter by means of the pulse LED on your 
# meter, useful if you do not have a serial port (P1).
#
substitutions:
  device_name: home-assistant-glow
  friendly_name: House
  device_description: "Measure your energy consumption with the pulse LED on your smart meter"
  pulse_pin: GPIO16
  led_status: GPIO2
  led_pulse: GPIO25
  update_interval: 5s
  
  # imp/kWh rate â¬‡ #
  pulse_rate: '1000'

esphome:
  name: '${device_name}'
  comment: '${device_description}'
  project:
    name: "klaasnicolaas.home_assistant_glow"
    version: "1.2.0"
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret iot_ssid
  password: !secret iot_pass

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}'
    password: !secret fallback_password

captive_portal:

# Enable logging
logger:
  level: WARN

# Enable Home Assistant API
api:
  password: !secret esphome_api_password

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5

web_server:
  port: 80
  auth:
    username: !secret esphome_web_username
    password: !secret esphome_web_password

output:
  - platform: gpio
    pin: ${led_pulse}
    id: output_led_pulse

light:
  - platform: binary
    internal: true
    id: led_pulse
    name: Pulse LED
    output: output_led_pulse

status_led:
  pin:
    number: ${led_status}
    inverted: false

# Sensors for ESP version and WIFI information
text_sensor:
  - platform: version
    hide_timestamp: true
    name: "${friendly_name} - ESPHome Version"
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} - IP Address"
      icon: mdi:wifi
    ssid:
      name: "${friendly_name} - Connected SSID"
      icon: mdi:wifi-strength-2

sensor:
  - platform: pulse_meter
    name: '${friendly_name} - Power consumption'
    unit_of_measurement: 'W'
    state_class: measurement
    device_class: power
    icon: mdi:flash-outline
    accuracy_decimals: 0
    internal_filter: 25ms # Pulse must be at least 25ms long for it to trigger
    pin: ${pulse_pin}
    on_value:
      then:
        - light.turn_on:
            id: led_pulse
            flash_length: 20ms
    filters:
      - throttle_average: ${update_interval}
      - lambda: return x * ((60.0 / ${pulse_rate}) * 1000.0);
    total:
      name: '${friendly_name} - Total energy'
      unit_of_measurement: 'kWh'
      icon: mdi:circle-slice-3
      state_class: total_increasing
      device_class: energy
      accuracy_decimals: 3
      filters:
        - throttle: ${update_interval}
        - lambda: return x * (1.0 / ${pulse_rate});
